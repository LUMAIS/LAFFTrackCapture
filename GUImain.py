import toml
import cv2 as cv
import pandas as pd
from numpy import record
from camera import Camera, fpsToCyclePeriod
from debugging import debugging
from pathlib import Path
from helperFunctions.showInfo import showInfo
from helperFunctions.saveCameraInfo import saveCameraInfo
from egrabber import GenTLException
from os.path import splitext

# Form implementation generated from reading ui file 'GUImain.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_CameraLayout(object):
    def __init__(self, grabberList):
        global debugging
        # Init capturing settings
        self.settings = {}
        self.cameras = []  # Selected cameras
        self.grabberList = grabberList
        if grabberList is None:
            debugging = True
            # self.cameraNames = []
        self.cameraNames = self.getCameras()

    def setupUi(self, CameraLayout):
        CameraLayout.setObjectName("CameraLayout")
        CameraLayout.resize(441, 551)
        self.appLayout= CameraLayout
        self.gridLayout = QtWidgets.QGridLayout(CameraLayout)
        self.gridLayout.setContentsMargins(12, -1, -1, -1)
        self.gridLayout.setObjectName("gridLayout")
        self.notesInput = QtWidgets.QPlainTextEdit(CameraLayout)
        self.notesInput.setObjectName("notesInput")
        self.gridLayout.addWidget(self.notesInput, 6, 0, 1, 1)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.videoRecLabel = QtWidgets.QLabel(CameraLayout)
        self.videoRecLabel.setObjectName("videoRecLabel")
        self.horizontalLayout_6.addWidget(self.videoRecLabel)
        self.videoRecStartBtn = QtWidgets.QPushButton(CameraLayout)
        self.videoRecStartBtn.setObjectName("videoRecStartBtn")
        self.horizontalLayout_6.addWidget(self.videoRecStartBtn)
        self.videoRecPausetBtn = QtWidgets.QPushButton(CameraLayout)
        self.videoRecPausetBtn.setObjectName("videoRecPausetBtn")
        self.horizontalLayout_6.addWidget(self.videoRecPausetBtn)
        self.videoRecStopBtn = QtWidgets.QPushButton(CameraLayout)
        self.videoRecStopBtn.setObjectName("videoRecStopBtn")
        self.horizontalLayout_6.addWidget(self.videoRecStopBtn)
        self.videoFormatInput = QtWidgets.QComboBox(CameraLayout)
        self.videoFormatInput.setMaximumSize(QtCore.QSize(80, 16777215))
        self.videoFormatInput.setObjectName("videoFormatInput")
        self.videoFormatInput.addItem("")
        self.videoFormatInput.addItem("")
        self.horizontalLayout_6.addWidget(self.videoFormatInput)
        self.gridLayout.addLayout(self.horizontalLayout_6, 9, 0, 1, 1)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.pictureLabel = QtWidgets.QLabel(CameraLayout)
        self.pictureLabel.setObjectName("pictureLabel")
        self.horizontalLayout_7.addWidget(self.pictureLabel)
        self.pictureTakeBtn = QtWidgets.QPushButton(CameraLayout)
        self.pictureTakeBtn.setObjectName("pictureTakeBtn")
        self.horizontalLayout_7.addWidget(self.pictureTakeBtn)
        self.pictureFormatsInput = QtWidgets.QComboBox(CameraLayout)
        self.pictureFormatsInput.setMaximumSize(QtCore.QSize(80, 16777215))
        self.pictureFormatsInput.setObjectName("pictureFormatsInput")
        self.pictureFormatsInput.addItem("")
        self.pictureFormatsInput.addItem("")
        self.pictureFormatsInput.addItem("")
        self.pictureFormatsInput.addItem("")
        self.horizontalLayout_7.addWidget(self.pictureFormatsInput)
        self.gridLayout.addLayout(self.horizontalLayout_7, 11, 0, 1, 1)
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setFieldGrowthPolicy(QtWidgets.QFormLayout.FieldGrowthPolicy.ExpandingFieldsGrow)
        self.formLayout.setLabelAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.formLayout.setFormAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.formLayout.setContentsMargins(0, 0, 0, -1)
        self.formLayout.setHorizontalSpacing(23)
        self.formLayout.setVerticalSpacing(10)
        self.formLayout.setObjectName("formLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.cameraSelectionLabel = QtWidgets.QLabel(CameraLayout)
        self.cameraSelectionLabel.setObjectName("cameraSelectionLabel")
        self.verticalLayout_2.addWidget(self.cameraSelectionLabel)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.startStreamingBtn = QtWidgets.QPushButton(CameraLayout)
        self.startStreamingBtn.setObjectName("startStreamingBtn")
        self.horizontalLayout_2.addWidget(self.startStreamingBtn)
        self.stopStreamingBtn = QtWidgets.QPushButton(CameraLayout)
        self.stopStreamingBtn.setObjectName("stopStreamingBtn")
        self.horizontalLayout_2.addWidget(self.stopStreamingBtn)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.formLayout.setLayout(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.verticalLayout_2)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setContentsMargins(5, -1, -1, -1)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
    
        # Create cameras and add to gui
        self.cameraOptions=[]
        for c in self.cameraNames:
            name = c.split()
            name = name[0]
            option = QtWidgets.QCheckBox(c, CameraLayout)
            option.setObjectName(name)
            self.cameraOptions.append(option)
            self.verticalLayout_3.addWidget(option)
        
        self.formLayout.setLayout(0,QtWidgets.QFormLayout.ItemRole.FieldRole,self.verticalLayout_3)
        self.windoSzLabel=QtWidgets.QLabel(CameraLayout)
        self.windoSzLabel.setObjectName('windoSzLabel')
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.ItemRole.LabelRole, self.windoSzLabel)

        self.hlSettings = QtWidgets.QHBoxLayout()
        self.hlSettings.setObjectName("hlSettings")
        self.btnLoadSettings = QtWidgets.QPushButton(CameraLayout)
        self.btnLoadSettings.setObjectName("btnLoadSettings")
        self.hlSettings.addWidget(self.btnLoadSettings)
        self.btnSaveSettings = QtWidgets.QPushButton(CameraLayout)
        self.btnSaveSettings.setObjectName("btnSaveSettings")
        self.hlSettings.addWidget(self.btnSaveSettings)
        self.gridLayout.addLayout(self.hlSettings, 0, 0, 1, 1)

        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setContentsMargins(5, -1, -1, -1)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.windoSzSmall = QtWidgets.QPushButton(CameraLayout)
        self.windoSzSmall.setObjectName("windoSzSmall")
        self.horizontalLayout_5.addWidget(self.windoSzSmall)
        self.windoSzBig = QtWidgets.QPushButton(CameraLayout)
        self.windoSzBig.setObjectName("windoSzBig")
        self.horizontalLayout_5.addWidget(self.windoSzBig)
        self.formLayout.setLayout(1, QtWidgets.QFormLayout.ItemRole.FieldRole, self.horizontalLayout_5)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.exposureLabel = QtWidgets.QLabel(CameraLayout)
        self.exposureLabel.setObjectName("exposureLabel")
        self.horizontalLayout_3.addWidget(self.exposureLabel)
        self.exposureSelect = QtWidgets.QComboBox(CameraLayout)
        self.exposureSelect.setObjectName("exposureSelect")
        self.horizontalLayout_3.addWidget(self.exposureSelect)
        self.formLayout.setLayout(2, QtWidgets.QFormLayout.ItemRole.LabelRole, self.horizontalLayout_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.exposureInput = QtWidgets.QSlider(CameraLayout)
        self.exposureInput.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.exposureInput.setObjectName("exposureInput")
        self.horizontalLayout.addWidget(self.exposureInput)
        self.exposureValue = QtWidgets.QLineEdit(CameraLayout)
        self.exposureValue.setMaximumSize(QtCore.QSize(40, 16777215))
        self.exposureValue.setObjectName("exposureValue")
        self.horizontalLayout.addWidget(self.exposureValue)
        self.formLayout.setLayout(2, QtWidgets.QFormLayout.ItemRole.FieldRole, self.horizontalLayout)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.resolutionLabel = QtWidgets.QLabel(CameraLayout)
        self.resolutionLabel.setObjectName("resolutionLabel")
        self.horizontalLayout_8.addWidget(self.resolutionLabel)
        self.resolutionSelect = QtWidgets.QComboBox(CameraLayout)
        self.resolutionSelect.setObjectName("resolutionSelect")
        self.horizontalLayout_8.addWidget(self.resolutionSelect)
        self.formLayout.setLayout(3, QtWidgets.QFormLayout.ItemRole.LabelRole, self.horizontalLayout_8)
        self.resolutionInput = QtWidgets.QComboBox(CameraLayout)
        self.resolutionInput.setObjectName("resolutionInput")
        self.resolutionInput.addItem("")
        self.resolutionInput.addItem("")
        self.resolutionInput.addItem("")
        self.resolutionInput.addItem("")
        self.resolutionInput.addItem("")
        self.resolutionInput.addItem("")
        self.resolutionInput.addItem("")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.ItemRole.FieldRole, self.resolutionInput)
        self.fpsLabel = QtWidgets.QLabel(CameraLayout)
        self.fpsLabel.setObjectName("fpsLabel")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.ItemRole.LabelRole, self.fpsLabel)
        self.fpsInput = QtWidgets.QDoubleSpinBox(CameraLayout)
        self.fpsInput.setMinimum(0.1)
        self.fpsInput.setMaximum(10.0)
        self.fpsInput.setObjectName("fpsInput")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.ItemRole.FieldRole, self.fpsInput)
        self.threshLabel = QtWidgets.QLabel(CameraLayout)
        self.threshLabel.setObjectName("threshLabel")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.ItemRole.LabelRole, self.threshLabel)
        self.threshInput = QtWidgets.QPushButton(CameraLayout)
        self.threshInput.setObjectName("threshInput")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.ItemRole.FieldRole, self.threshInput)
        self.gridLayout.addLayout(self.formLayout, 2, 0, 1, 1)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.saveInLabel = QtWidgets.QLabel(CameraLayout)
        self.saveInLabel.setObjectName("saveInLabel")
        self.horizontalLayout_4.addWidget(self.saveInLabel)
        self.saveInInput = QtWidgets.QLineEdit(CameraLayout)
        self.saveInInput.setObjectName("saveInInput")
        self.horizontalLayout_4.addWidget(self.saveInInput)
        self.saveInBtn = QtWidgets.QPushButton(CameraLayout)
        self.saveInBtn.setObjectName("saveInBtn")
        self.horizontalLayout_4.addWidget(self.saveInBtn)
        self.gridLayout.addLayout(self.horizontalLayout_4, 8, 0, 1, 1)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setContentsMargins(-1, 0, -1, -1)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.nameLabel = QtWidgets.QLabel(CameraLayout)
        self.nameLabel.setObjectName("nameLabel")
        self.horizontalLayout_9.addWidget(self.nameLabel)
        self.nameInput = QtWidgets.QLineEdit(CameraLayout)
        self.nameInput.setObjectName("nameInput")
        self.horizontalLayout_9.addWidget(self.nameInput)
        self.gridLayout.addLayout(self.horizontalLayout_9, 7, 0, 1, 1)
        self.notesLabel = QtWidgets.QLabel(CameraLayout)
        self.notesLabel.setObjectName("notesLabel")
        self.gridLayout.addWidget(self.notesLabel, 5, 0, 1, 1)

        # Connections
        self.btnLoadSettings.clicked.connect(self.loadSettings)
        self.btnSaveSettings.clicked.connect(self.saveSettings)
        self.startStreamingBtn.clicked.connect(self.startCameras)
        self.exposureInput.valueChanged.connect(self.changeExposureSlider)
        self.stopStreamingBtn.clicked.connect(self.stopCameras)
        self.windoSzBig.clicked.connect(self.goUp)
        self.windoSzSmall.clicked.connect(self.goDown)
        self.exposureSelect.currentIndexChanged.connect(self.setUpExposure)
        self.exposureValue.returnPressed.connect(self.changeExposureText)
        self.resolutionSelect.currentIndexChanged.connect(self.resolutionCameraSelected)
        self.resolutionInput.currentTextChanged.connect(self.changeResolution)
        self.videoRecStartBtn.clicked.connect(self.startRecording)
        self.videoRecPausetBtn.clicked.connect(self.pauseRecording)
        self.videoRecStopBtn.clicked.connect(self.stopRecording)
        self.saveInBtn.clicked.connect(self.selectPath)
        self.pictureTakeBtn.clicked.connect(self.getImage)
        self.fpsInput.valueChanged.connect(self.updateFPS)
        self.threshInput.clicked.connect(self.toggleThresh)

        # Initial set up
        self.enableAll(False)
        self.fpsInput.setValue(10.0)
        
        self.retranslateUi(CameraLayout)
        QtCore.QMetaObject.connectSlotsByName(CameraLayout)


    def retranslateUi(self, CameraLayout):
        _translate = QtCore.QCoreApplication.translate
        CameraLayout.setWindowTitle(_translate("CameraLayout", "Camera"))
        self.btnLoadSettings.setText(_translate("CameraLayout", "Load Settings"))
        self.btnSaveSettings.setText(_translate("CameraLayout", "Save Settings"))
        self.notesInput.setPlaceholderText(_translate("CameraLayout", "Lights and camera parameters, etc"))
        self.videoRecLabel.setText(_translate("CameraLayout", "Video recording:"))
        self.videoRecStartBtn.setText(_translate("CameraLayout", "Start"))
        self.videoRecPausetBtn.setText(_translate("CameraLayout", "Pause"))
        self.videoRecStopBtn.setText(_translate("CameraLayout", "Stop"))
        self.videoFormatInput.setItemText(0, _translate("CameraLayout", "mp4"))
        self.videoFormatInput.setItemText(1, _translate("CameraLayout", "avi"))
        self.pictureLabel.setText(_translate("CameraLayout", "Picture: "))
        self.pictureTakeBtn.setText(_translate("CameraLayout", "Take"))
        self.pictureFormatsInput.setItemText(0, _translate("CameraLayout", "jpg"))
        self.pictureFormatsInput.setItemText(1, _translate("CameraLayout", "png"))
        self.pictureFormatsInput.setItemText(2, _translate("CameraLayout", "gif"))
        self.pictureFormatsInput.setItemText(3, _translate("CameraLayout", "tiff"))
        self.cameraSelectionLabel.setText(_translate("CameraLayout", "Select camera: "))
        self.startStreamingBtn.setText(_translate("CameraLayout", "Start"))
        self.stopStreamingBtn.setText(_translate("CameraLayout", "Stop"))
        self.windoSzLabel.setText(_translate("CameraLayout", "Window size:"))
        self.windoSzSmall.setText(_translate("CameraLayout", "x 0.5"))
        self.windoSzBig.setText(_translate("CameraLayout", "x 2"))
        self.exposureLabel.setText(_translate("CameraLayout", "Exposure:"))
        self.resolutionLabel.setText(_translate("CameraLayout", "Resolution:"))
        self.resolutionInput.setItemText(0, _translate("CameraLayout", "128 px"))
        self.resolutionInput.setItemText(1, _translate("CameraLayout", "576 px"))
        self.resolutionInput.setItemText(2, _translate("CameraLayout", "1024 px"))
        self.resolutionInput.setItemText(3, _translate("CameraLayout", "1472 px"))
        self.resolutionInput.setItemText(4, _translate("CameraLayout", "1984 px"))
        self.resolutionInput.setItemText(5, _translate("CameraLayout", "2496 px"))
        self.resolutionInput.setItemText(6, _translate("CameraLayout", "3008 px"))
        self.fpsLabel.setText(_translate("CameraLayout", "FPS:"))
        self.threshLabel.setText(_translate("CameraLayout", "Show thresholds:"))
        self.threshInput.setText(_translate("CameraLayout", "Off"))
        self.saveInLabel.setText(_translate("CameraLayout", "Save in:"))
        self.saveInBtn.setText(_translate("CameraLayout", "Select folder"))
        self.nameLabel.setText(_translate("CameraLayout", "Name:"))
        self.notesLabel.setText(_translate("CameraLayout", "Other parameters:"))

    # Takes: boolean
    # Void: enables and dissables part of the gui
    def enableAll(self, toggle):
        self.btnLoadSettings.setEnabled(toggle)
        self.btnSaveSettings.setEnabled(toggle)
        self.windoSzBig.setEnabled(toggle)
        self.windoSzSmall.setEnabled(toggle)
        self.exposureSelect.setEnabled(toggle)
        self.exposureInput.setEnabled(toggle)
        self.exposureValue.setEnabled(toggle)
        self.resolutionSelect.setEnabled(toggle)
        self.resolutionInput.setEnabled(toggle)
        self.videoRecPausetBtn.setEnabled(toggle)
        self.videoRecStartBtn.setEnabled(toggle)
        self.videoRecStopBtn.setEnabled(toggle)
        self.pictureTakeBtn.setEnabled(toggle)
        self.stopStreamingBtn.setEnabled(toggle)
        self.videoFormatInput.setEnabled(toggle)
        self.pictureFormatsInput.setEnabled(toggle)
        self.notesInput.setEnabled(toggle)
        self.nameInput.setEnabled(toggle)
        self.saveInInput.setEnabled(toggle)
        self.saveInBtn.setEnabled(toggle)
        self.fpsInput.setEnabled(toggle)
        self.threshInput.setEnabled(toggle)
        
    # Extract camera model and vendor from grabber
    def getCameras(self):
        names = []
        if debugging:
            camNum = 4  # The (max) number of cameras fetched from the grabber
            for n in range(camNum):
                names.append(str(n) + '_' + 'CAM_MODEL')
        else:
            for i, grabber in enumerate(self.grabberList):
                if grabber.remote is not None:
                    model = grabber.remote.get('DeviceModelName')
                    # vendor = grabber.remote.get('DeviceVendorName')
                    # title =  model + ' from ' + vendor
                    title = str(i) + '_' + model
                    names.append(title)
        return names

    # Class attributes
    threadpool = QtCore.QThreadPool()
    running = False
    
    # Checks what cameras are selected and starts streaming
    def startCameras(self):
        # Check what cameras were selected
        camerasSelected = {}
        for index,c in enumerate(self.cameraOptions):
            # If camera was selected add to selected grabber
            if c.isChecked():
                if debugging:
                    camerasSelected[self.cameraNames[index]] = None
                else:
                    camerasSelected[self.cameraNames[index]] = self.grabberList[index]
                    # grabber = self.grabberList[index]
                    # cameraName = self.cameraNames[index]
                 
        # If cameras were selected and not already running, start streaming
        if len(camerasSelected)!=0 and not self.running:
            self.running = True
            # Block selection of new cameras
            for c in self.cameraOptions:
                c.setEnabled(False)
            self.enableAll(True)
            self.startStreamingBtn.setEnabled(False)
            self.cameras.clear()
            # Initialize all cameras
            timeKeeper = True  # This camera taking care of time => ? master  TOFIX
            initMaster = True  # Whether to initialize master
            for ix,name in enumerate(camerasSelected):
                # Get grabber from dictionary
                grabber = camerasSelected[name]
                # Set masters and slaves
                if len(camerasSelected)==1:
                    # If there is only one camera, disconnect
                    grabber.device.set('C2CLinkConfiguration', 'Disconnected')
                else:
                    print('Setting up slaves')
                    grabber.device.set('C2CLinkConfiguration', 'Slave')
                    if ix+1 == len(camerasSelected):
                        grabber.device.set('C2CLinkConfiguration', 'Master')

                ### --- HARDCODING CAMERA CONFIGURATIONS --- ###
                if initMaster and grabber.remote.get('DeviceVendorName')=='Hikvision':
                    grabber.remote.set('TriggerMode','On')
                    grabber.remote.set('TriggerSource','LinkTrigger0')
                    self.fpsInput.setValue(10)
                    fps = 10
                    try:
                        # setInteger<DeviceModule>("CycleMinimumPeriod", 1e6 / (2 * options.FPS));
                        fps = fpsToCyclePeriod(grabber.device.get('CycleMinimumPeriod'))
                    except GenTLException as err:
                        print('ERROR: failed to fetch grabber FPS: ' + str(err))
                    self.fpsInput.setValue(min(10, fps))  # Current fps limited to 10
                    initMaster = False
                elif grabber.remote.get('DeviceVendorName')=='IO Industries Inc':
                    grabber.remote.set('ExposureMode','Edge_Triggered_Programmable')
                ### --- END OF HARDCODE ---- ###
                # Create worker
                name = name.replace(' ', '_')
                camera = Camera(grabber,name,timeKeeper)
                timeKeeper=False
                camera.signals.images.connect(self.showImg)
                camera.signals.updateInfo.connect(self.visualizeInfo)
                self.threadpool.start(camera)
                self.cameras.append(camera)
                print('Starting camera: ', name)
                # Create options in exposure and resolution 
                self.exposureSelect.addItem(name)
                self.resolutionSelect.addItem(name)
                # Create openCV window
                cv.namedWindow(name)
                cv.setMouseCallback(name, self.imageInteraction,ix)
                # Window for thresholds
                threshName = 'Thresholded ' + name
                cv.namedWindow(threshName)
                cv.setMouseCallback(threshName, self.selectWindow,ix)
                cv.createTrackbar('Min',threshName,0,255,lambda x: self.changeThreshold(x,'min'))
                cv.createTrackbar('Max',threshName,0,255,lambda x: self.changeThreshold(x,'max'))
                cv.setTrackbarPos('Min', threshName, 0)
                cv.setTrackbarPos('Max', threshName, 255)
                print('Creating threshold window: ', threshName, ix)
        else:
            self.cameraError()

    # Stop cameras stream
    def stopCameras(self):
        self.running = False
        # Disable selection
        self.exposureSelect.clear()
        self.resolutionSelect.clear()
        self.enableAll(False)
        self.startStreamingBtn.setEnabled(True)
        # Turn off cameras
        for cam in self.cameras:
            cam.running = False 
        # Destroy visualization
        cv.destroyAllWindows()
        # Allow camera selection
        for c in self.cameraOptions:
            c.setEnabled(True)

    # Make a pop up message   
    def cameraError(self):
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
        msg.setText("Camera not selected")
        msg.setInformativeText('No cameras were selected')
        msg.setWindowTitle("Camera not selected")
        msg.exec()

    # VISUALIZATION ------------------------
    # Resize window view
    def goUp(self):
        for cam in self.cameras:
            cam.display_zoom = cam.display_zoom * 2

    def goDown(self):
        for cam in self.cameras:
            cam.display_zoom = cam.display_zoom * 0.5

    # Shows image in main gui
    def showImg(self, bundle):
        if self.running:
            cv.imshow(*bundle)

    # Connects to button in gui to enable or dissable the threshold image
    def toggleThresh(self):
        btn=self.threshInput.text()
        if btn =='On':
            self.threshInput.setText('Off')
            thresh = False
        else:
            self.threshInput.setText('On')
            thresh = True
        # Do not send any more images
        for cam in self.cameras:
            cam.showThresh = thresh

    dragging=False
    currentWindow = 0

    # Sets the selected window as the last one that was hovered on
    def selectWindow(self,action, x, y, flags, *userdata):
        self.currentWindow=userdata[0]

    # Connects mouse action in images to output like pixel color and area selection
    def imageInteraction(self,action, x, y, flags, *userdata):

        index=userdata[0]
        cam=self.cameras[index]
        if action == cv.EVENT_LBUTTONDOWN:
            if not cam.recording:
                print('mouse pressed on: ', x, y)
                self.dragging = True
                cam.start_drag = (x,y)

        elif action == cv.EVENT_LBUTTONUP:
            if not cam.recording:
                print('mouse released on: ', x, y)
                cam.end_drag=(x, y)
                cam.setZoom()
                self.dragging = False
                cam.start_drag=None
                cam.end_drag=None

        
        elif action==cv.EVENT_RBUTTONUP or action==cv.EVENT_MBUTTONUP:
            print('Current area of interest ', cam.areaOfInteres)
            print('Setting ', cam.cameraName, ' areas of interest to none')
            cam.areaOfInteres=None
            print('Current area of interest ', cam.areaOfInteres)

        else:
            if self.dragging:
                cam.end_drag=(x,y)
            cam.hovering(x,y)

    # Connects to thresholded image slider bar
    def changeThreshold(self,val,thresh):
        cam=self.cameras[self.currentWindow]
        if thresh=='min':
            cam.lowerThresh=val
        elif thresh =='max':
            cam.higherThresh=val

    # EXPOSURE CONTROLS ------------------------
    # Takes: New value from slider
    # Void: grabber exposure changes
    def changeExposureSlider(self,val):
        self.exposureValue.setText(str(val))
        self.currentExpValue=val
        self.selectedExpCamera.exposure = self.currentExpValue
        if not debugging:
            # Set grabber in camera's exposure
            self.selectedExpCamera.grabber.remote.set(self.exposureCommand, self.selectedExpCamera.exposure)
    
    # Connects to label showing exposure value
    def changeExposureText(self):
        # Get value from line input
        val =self.exposureValue.text()
        print('value changed: ', val)
        # Convert value to int 
        try:
            val=int(val)
        except:
            val = None
            print ('Value is not an int')
        
        if val is not None and self.maxExpValue >=val >= self.minExpValue and val != self.currentExpValue:
            print('new value', val)
            self.exposureInput.setValue(val)
            self.currentExpValue=val

        # Set value to accepted value (Back to last value if input not valid)
        self.exposureValue.setText(str(self.currentExpValue))
        self.selectedExpCamera.exposure = self.currentExpValue
        if not debugging:
            # Set grabber in camera's exposure
            self.selectedExpCamera.grabber.remote.set(self.exposureCommand, self.selectedExpCamera.exposure)
        
    # Sets up exposure options in gui when a camera is selected
    def setUpExposure(self,idx,retain=True):
        # Changes to -1 when options are deleted
        print('Exposure selection changed in camera: ',idx)
        if idx != -1:
            # Get command to use for specific camera
            df=pd.read_csv('cameraControls.tsv',sep='\t',index_col=0)

            # Get commands to set exposure to min and max
            if debugging:
                if idx==0:
                    vendor = 'Hikvision'
                else:
                    vendor = 'IO Industries Inc'
            else:
                # Get camera selected
                self.selectedExpCamera=self.cameras[idx]
                # Get vendor name
                vendor=self.selectedExpCamera.grabber.remote.get('DeviceVendorName')
            minCommand = df.loc[df['Command'] == 'ExposureMin', vendor].values[0]
            maxCommand = df.loc[df['Command'] == 'ExposureMax', vendor].values[0]
            self.exposureCommand = df.loc[df['Command'] == 'ExposureNow', vendor].values[0]

            # Get values to set slider
            if debugging:
                print('Getting min exposure with ',minCommand,type(minCommand))
                print('Getting max exposure with ',maxCommand,type(maxCommand))
                print('Getting current exposure with ',self.exposureCommand,type(self.exposureCommand))
                self.minExpValue = 5
                self.maxExpValue = 50
                self.currentExpValue = 8
                self.selectedExpCamera.exposure = self.currentExpValue
            else:
                self.minExpValue = int(self.selectedExpCamera.grabber.remote.get(minCommand))
                self.maxExpValue = int(self.selectedExpCamera.grabber.remote.get(maxCommand))
                if retain:  # Retain the device stored value
                    self.currentExpValue = int(self.selectedExpCamera.grabber.remote.get(self.exposureCommand))
                    self.selectedExpCamera.exposure = self.currentExpValue
                # Set grabber in camera's exposure
                self.selectedExpCamera.grabber.remote.set(self.exposureCommand, self.selectedExpCamera.exposure)
            # Set slider values
            self.exposureInput.setMinimum(self.minExpValue)
            self.exposureInput.setMaximum(self.maxExpValue)
            self.exposureInput.setValue(self.currentExpValue)
            # Set value in line input
            self.exposureValue.setText(str(self.currentExpValue))


    # RESOLUTION CONTROLS ------------------------
    # Selecting camera sets resolution of current camera in dropbox
    def resolutionCameraSelected(self,idx):
        # Get resolution
        if idx >= 0:
            self.selectedResCamera=self.cameras[idx]
        res = self.selectedResCamera.saveResolution
       
        for n in range(7): # There are 7 options for resolutions. This could be changed in code if necessary
            resolution = self.resolutionInput.itemText(n)
            if str(res) in resolution:
                self.resolutionInput.setCurrentIndex(n)
        
    # Changing dropbox value changes camera resolution
    def changeResolution(self, txt):
        if self.running:
            print('Resolution (recording frame height) changed:',txt)
            val = int(txt.split()[0])
            self.selectedResCamera.saveResolution = val
            

    # VIDEO AND  IMAGES ACQUISITION  ------------------------

    # Updates video fps based on exposure
    def updateFPS(self, fps):
        if fps < 1:
            fps = 1
        if self.running:
            # cam = self.cameras[-1]
            for cam in self.cameras:
                if not debugging:
                    try: 
                        cam.grabber.device.set('CycleMinimumPeriod', fpsToCyclePeriod(fps))  # TODO: this API call fails
                        print('Grabber FPS set to: ', fps)
                    except GenTLException as err:
                        print('ERROR: failed to set grabber FPS: ' + str(err))
                        return
                print('{} FPS changed to: {}'.format(cam.grabber.remote.get('DeviceModelName'), fps))
        
    recording=False
    # Starts recording
    def startRecording(self):
        ('Print attempting recording')
        if not self.recording:
            print('Recording starting')
            self.recording = True
            savePath = self.saveInInput.text()
            # Get video parameters
            if savePath =='':
                savePath = str(Path.home())
                self.saveInInput.setText(savePath)
                print('Saving in: ', savePath)
            self.saveInBtn.setEnabled(False)
            self.saveInInput.setEnabled(False)
            self.videoFormatInput.setEnabled(False)
            self.fpsInput.setEnabled(False)
            self.videoRecStartBtn.setEnabled(False)

            expName = self.nameInput.text()
            if expName == '':
                expName = 'experiment'
                self.nameInput.setText(expName)
            print('Experiment name: ', expName)
            self.nameInput.setEnabled(False)
            expName.replace(' ','_')

            format = self.videoFormatInput.currentText()

            # Start recording
            for cam in self.cameras:
                cam.recordingStatus = 'Recording'
                cam.savePath = savePath
                cam.expName=expName
                cam.videoOutput=format
                cam.recording=True

            # Save info
            notes = self.notesInput.toPlainText()
            saveCameraInfo(self.cameras,savePath,expName,'video',notes)
        else:
            for cam in self.cameras:
                cam.recordingStatus = 'Recording'
                cam.recording=True
                cam.timer.resume()


    def pauseRecording(self):
        print('Recording paused')
        self.videoRecStartBtn.setEnabled(True)
        for cam in self.cameras:
            cam.recording=False
            cam.recordingStatus = 'Paused'
            cam.timer.pause()

    def stopRecording(self):
        if self.recording:
            print('Recording stop')
            self.videoRecStartBtn.setEnabled(True)
            for cam in self.cameras:
                cam.recording=False
                if cam.everRecorded == True:
                    cam.out.release()
                    cam.everRecorded=False
                if cam.recordingStatus != 'Paused':
                    cam.timer.pause()
                cam.recordingStatus = 'Stopped'
            self.saveInBtn.setEnabled(True)
            self.saveInInput.setEnabled(True)
            self.nameInput.setEnabled(True)
            self.videoFormatInput.setEnabled(True)
            self.fpsInput.setEnabled(True)

            self.recording=False

    # Takes and save picture
    def getImage(self):

        # Get parameters
        savePath = self.saveInInput.text()
        if savePath =='':
            savePath = str(Path.home())
            self.saveInInput.setText(savePath)
        
        expName = self.nameInput.text()
        if expName == '':
            expName = 'experiment'
            self.nameInput.setText(expName)

        # Iterate cameras
        format=self.pictureFormatsInput.currentText()
        print('Taking picture')
        for cam in self.cameras:
            cam.imgFormat=format
            cam.savePath = savePath
            cam.expName=expName
            cam.capturing = True 
        
        # Save info
        notes = self.notesInput.toPlainText()
        saveCameraInfo(self.cameras,savePath,expName,'img',notes)


    # SHOW INFO  ------------------------
    # Shows camera info in a window
    def visualizeInfo(self):
        if self.running:
            img =showInfo(self.cameras)
            cv.imshow('Info', img)

    # SAVE INFO  ------------------------
    # Select path where to save data
    def selectPath(self):
        # Open dialog box
        dialog = QtWidgets.QFileDialog()
        # Get directory
        filename = dialog.getExistingDirectory()
        self.saveInInput.setText(filename)


    # SAVE Settings  ------------------------
    def saveSettings(self):
        # Save dialog box
        
        # dlg = QtWidgets.QFileDialog()
        # dlg.setAcceptMode(QtWidgets.QFileDialog.AcceptMode.AcceptSave)
        # # dlg.setFileMode(QtWidgets.QFileDialog.AnyFile)
        # dlg.setFilter(QtCore.QDir.Filter('Capturing settings (*.toml)'))
        # fname = dlg.getSaveFileName(self, 'Save settings file', '' # current path
        #     , 'Capturing settings (*.toml)')
        fext = '.toml'
        fname = QtWidgets.QFileDialog.getSaveFileName(self.appLayout, 'Save settings file', '' # current path
            , 'Capturing settings (*{}})'.format(fext))  # "Image files (*.jpg *.gif)"; "All Files (*);;Python Files (*.py);;Text Files (*.txt)"

        if not fname[0]:
            return
        fname = fname[0]
        # Ensure the correct file extension
        if splitext(fname)[1] != fext:
            fname += fext
        print('Saving settings to: ' + fname)
        with open(fname, 'w') as fobj:
            toml.dump(self.getSetings(), fobj)


    # LOAD Settings  ------------------------
    def loadSettings(self):
        # Load dialog box
        dlg = QtWidgets.QFileDialog()
        dlg.setAcceptMode(QtWidgets.QFileDialog.AcceptMode.AcceptOpen)
        dlg.setFileMode(QtWidgets.QFileDialog.FileMode.ExistingFile)
        fname = QtWidgets.QFileDialog.getOpenFileName(self.appLayout, 'Load settings file', '' # current path
            , 'Capturing settings (*.toml)')  # "Image files (*.jpg *.gif)"; "All Files (*);;Python Files (*.py);;Text Files (*.txt)"

        if not fname[0]:
            return
        fname = fname[0]
        print('Loading settings from: ' + fname)
        with open(fname, "r") as fobj:
            settings = toml.load(fobj)
            self.setSettings(settings)
        
        # Update UI elements
        # sigbbl = self.exposureSelect.blockSignals(True);
        # self.exposureSelect.setCurrentIndex(self.exposureSelect.currentIndex())
        # self.exposureSelect.blockSignals(sigbbl);
        self.currentExpValue = self.selectedExpCamera.exposure
        self.exposureValue.setText(str(self.currentExpValue))
        # Set slider values
        self.exposureInput.setValue(self.currentExpValue)

        self.resolutionCameraSelected(-1)  # Reselect current camera to update GUI values

        self.fpsInput.setValue(self.selectedExpCamera.fps)

        if self.selectedExpCamera.savePath:
            self.saveInInput.setText(self.selectedExpCamera.savePath)


    def getSetings(self):
        """Fetch capturing settings as a dictionary for the selected cameras"""
        if not self.cameras:
            print('WARNING: no cameras are selected to save their settings')
            return

        # camera = Camera(grabber,name,timeKeeper)
        # self.grabberList = grabberList
        # self.cameraNames = self.getCameras()

        # data = {'general': {'fps:': self.fpsInput.value()}, 'cameras': {cam.cameraName: cam.settings() for cam in self.cameras}}
        data = {'cameras': {cam.cameraName: cam.settings() for cam in self.cameras}}
        return data


    def setSettings(self, settings):
        """Set capturing settings from a dictionary for the selected cameras, stopping the recording"""
        if not self.cameras:
            print('WARNING: no cameras are selected to for the settings loading')
            return

        # Stop camera recording if any
        self.stopRecording()
        # if self.running:
        # self.stopCameras()

        for cam in self.cameras:
            cs = settings['cameras'].get(cam.cameraName)
            if cs:
                cam.loadSettings(cs)
                print(cam.cameraName + ' settings loaded')
                # Update GUI values
            else:
                print('WARNING: ' + cam.cameraName + ' settings are not available')

    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    CameraLayout = QtWidgets.QWidget()
    ui = Ui_CameraLayout()
    ui.setupUi(CameraLayout, None)
    CameraLayout.show()
    sys.exit(app.exec_())

